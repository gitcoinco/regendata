name: Test Long-Running Query

on:
  workflow_dispatch:

jobs:
  test-long-query:
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary

      - name: Run Long-Running Query
        run: |
          python -c "
import os
import psycopg2
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Database configuration
DB_PARAMS = {
    'host': os.environ['DB_HOST'],
    'port': os.environ['DB_PORT'],
    'dbname': 'Grants',
    'user': os.environ['DB_USER'],
    'password': os.environ['DB_PASSWORD'],
    'connect_timeout': 600,  # 10 minutes
}

def long_running_query():
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        with conn.cursor() as cursor:
            logger.info('Starting long-running query (SELECT pg_sleep(600);)')
            cursor.execute('SELECT pg_sleep(600);')
            logger.info('Long-running query completed successfully.')
    except psycopg2.Error as e:
        logger.error(f'Database error: {e}')
        raise
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == '__main__':
    long_running_query()
"
        timeout-minutes: 15  # Ensures the step allows enough time for the query to complete